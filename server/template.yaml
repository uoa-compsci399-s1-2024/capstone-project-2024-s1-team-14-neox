AWSTemplateFormatVersion: "2010-09-09"
Description: SAM template for cloud backend
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Description: The environment in which to run the stack (needed for CORS)
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - localhost
  UseCase:
    Description: "Which team will use the website instance (prod is no team, it's a releasable 'product')"
    Type: String
    AllowedValues:
      - app
      - website
      - server
      - all
      - prod
      - ml

  WebsiteStackName:
    Description: Name of an active CloudFormation stack containing the S3 buckets to use for prod and dev websites.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: frontend
  WebsiteLocalhostPort:
    Description: The port used for localhost development of website
    Type: Number
    Default: 3000

  DatabasePort:
    Description: Please enter the port number on which the database will accept connections
    Type: Number
    Default: 5432

  AdminsUserGroup:
    Description: Name for Cognito user group of admins
    Type: String
    Default: admins
  ResearchersUserGroup:
    Description: Name for Cognito user group of researchers
    Type: String
    Default: researchers
  ParentsUserGroup:
    Description: Name for Cognito user group of parents
    Type: String
    Default: parents

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.8.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.8.10.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.8.11.0/24
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.8.20.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.8.21.0/24
# Mappings:

Conditions:
  IsProd: !Equals [ !Ref Environment, prod ]
  IsDev: !Equals [ !Ref Environment, dev ]
  IsLocalhostWebsite: !Equals [ !Ref Environment, localhost ]

Rules:
  ProdUseCaseMeansProdEnv:
    RuleCondition:
      Fn::Equals: [ !Ref UseCase, prod ]
    Assertions:
      - Assert:
          Fn::Equals: [ !Ref Environment, prod ]
        AssertionDescription: Prod use case implies prod environment

Globals:
  Function:
    Runtime: nodejs20.x
    Layers:
      - !Ref LayerDepsJS
      - !Ref LayerCACertificates
    Environment:
      Variables:
        PGHOST: !GetAtt Database.Endpoint.Address
        # Default PGDATABASE is the user which we will get from the SecretsManager Secret
        PGPORT: !GetAtt Database.Endpoint.Port
        DB_SECRET_ARN: !GetAtt Database.MasterUserSecret.SecretArn
        SSL_CERT_FILE: /opt/global-bundle.pem
        USERPOOL_ID: !GetAtt UserPool.UserPoolId
        GROUPNAME_ADMINS: !Ref AdminsUserGroup
        GROUPNAME_RESEARCHERS: !Ref ResearchersUserGroup
        GROUPNAME_PARENTS: !Ref ParentsUserGroup
    VpcConfig:
      SecurityGroupIds:
        - !Ref DBAccessSecurityGroup
        - !Ref SecretsAccessSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: backend-vpc
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      ResourceType: VPC
      ResourceId: !Ref VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Sub "${AWS::StackName}-VPCFlowLogsGroup"
      LogFormat: ${version} ${vpc-id} ${subnet-id} ${instance-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${packets} ${bytes} ${start} ${end} ${action} ${log-status}
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
  FlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role to allow VPC to publish flow logs.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        # It seems like the PolicyName (which is the "friendly name") must be unique within an account
        # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html
        - PolicyName: !Sub "${AWS::StackName}-FlowLogsPublish"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet Gateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet (AZ1)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet (AZ2)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet (AZ1)
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  # Use default network ACL for public subnets.

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Routes (AZ1)
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  NATGateway1:
     Type: AWS::EC2::NatGateway
     Properties:
        AllocationId: !GetAtt NATGatewayEIP1.AllocationId
        SubnetId: !Ref PublicSubnet1
  NATGatewayEIP1:
     Type: AWS::EC2::EIP
     Properties:
        Domain: vpc
  RouteNATGateway1:
     Type: AWS::EC2::Route
     Properties:
        RouteTableId: !Ref PrivateRouteTable1
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Routes (AZ2)
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  NATGateway2:
     Type: AWS::EC2::NatGateway
     Properties:
        AllocationId: !GetAtt NATGatewayEIP2.AllocationId
        SubnetId: !Ref PublicSubnet2
  NATGatewayEIP2:
     Type: AWS::EC2::EIP
     Properties:
        Domain: vpc
  RouteNATGateway2:
     Type: AWS::EC2::Route
     Properties:
        RouteTableId: !Ref PrivateRouteTable2
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway2

  NetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref NetworkACL
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref NetworkACL
  OutboundDbRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 100
      Protocol: 6  # TCP
      Egress: true
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      PortRange:
        From: !Ref DatabasePort
        To: !Ref DatabasePort
  InboundDbRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 100
      Protocol: 6  # TCP
      Egress: false
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      PortRange:
        From: !Ref DatabasePort
        To: !Ref DatabasePort
  OutboundLambdaRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 110
      Protocol: 6  # TCP
      Egress: true
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      # need to send packets back to Lambdas which start connections from an ephemeral port range.
      # See https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports
      PortRange:
        From: 1024
        To: 65535
  InboundLambdaRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 110
      Protocol: 6  # TCP
      Egress: false
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      # need to send packets back to Lambdas which start connections from an ephemeral port range.
      # See https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports
      PortRange:
        From: 1024
        To: 65535
  OutboundSecretsRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 150
      Protocol: 6  # TCP
      Egress: true
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      PortRange:
        From: 443
        To: 443
  InboundSecretsRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 150
      Protocol: 6  # TCP
      Egress: false
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      PortRange:
        From: 443
        To: 443
  OutboundHttpsNatRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 200
      Protocol: 6  # TCP
      Egress: true
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'
      # # need to send requests to public internet through NAT gateways, which use ephemeral ports
      # # See https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports
      PortRange:
        From: 443
        To: 443
  InboundNatRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 200
      Protocol: 6  # TCP
      Egress: false
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'
      # # need to receive responses from requests sent through NAT gateways, which use ephemeral ports
      # # See https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports
      PortRange:
        From: 1024
        To: 65535

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Role to allow lambda functions to do everything in the set of things our backend needs to do (ie, it's not minimal)"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        # TODO: lock down cognito access to specific lambdas only AND to specific user pool
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
      Policies:
        # It seems like the PolicyName (which is the "friendly name") must be unique within an account
        # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html
        - PolicyName: !Sub "${AWS::StackName}-AllowReadSecretValue-DB"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !GetAtt Database.MasterUserSecret.SecretArn
                # Based on https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#auth-and-access_examples_vpc
                Condition:
                  StringEquals:
                    aws:sourceVpce: !Ref SecretsManagerVPCEndpoint
        # for adding triggers to userpool
        - PolicyName: !Sub "${AWS::StackName}-ManageLambdaPermissions"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource: '*'

  # TODO: set up vpc endpoint for lambda

  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SecretsManagerSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  SecretsManagerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound HTTPS traffic from authorised applications for Secrets Manager
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId:
            Ref: SecretsAccessSecurityGroup
  SecretsAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for applications allowed to access Secrets Manager
      VpcId: !Ref VPC
      # no in/egress rules since none needed

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for database (mandatory for VPC DBs!)
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound postgres traffic from authorised applications for database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DatabasePort
          ToPort: !Ref DatabasePort
          SourceSecurityGroupId:
            Ref: DBAccessSecurityGroup
  DBAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for services allowed to access database
      VpcId: !Ref VPC
      # no in/egress rules since none needed
  # Database
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      StorageType: gp2
      AllocatedStorage: 20  # GiB
      DBInstanceClass: db.t3.micro  # free-tier acceptable
      # Use Default DBName of `postgres` for PostgreSQL
      DBName: postgres
      Port: !Ref DatabasePort
      MasterUsername: postgres
      ManageMasterUserPassword: true  # in AWS Secrets Manager
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      EnablePerformanceInsights: true
      EnableCloudwatchLogsExports:
        - postgresql
        - upgrade
      BackupRetentionPeriod: 7  # days
      StorageEncrypted: true
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
  # TODO: Use parameter store for location of cert layer?
  # See https://dev.to/leading-edje/aws-lambda-layer-for-private-certificates-465j
  LayerCACertificates:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-layer-ca-certs"
      Description: Certificates to connect to DB via TLS
      ContentUri: lambda/layers/certs/
      CompatibleRuntimes:
        - nodejs20.x
      # RetentionPolicy: Retain

  # Auth stuff
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
      DeletionProtection: !If [ IsProd, ACTIVE, INACTIVE ]
      # No device-remembering.
      # No multi-factor auth for now.
      Schema:
        - Name: family_name
          Required: true
          Mutable: true
        - Name: middle_name
          Required: false
          Mutable: true
        - Name: given_name
          Required: true
          Mutable: true
        - Name: nickname
          Required: false
          Mutable: true
        - Name: email
          Required: true
          Mutable: false  # for now
      # No SMS for now.
  # For now, only one client BUT can make another if we need to differentiate between web and app clients
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !GetAtt UserPool.UserPoolId
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
  FuncCognitoPostConfirm:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/meta-cognito-postconfirm/
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      # Can't set trigger for userpool here because of circular dependencies.
  # API Gateway
  API:
    Type: AWS::Serverless::Api
    DependsOn: APICloudWatchRoleArn
    Properties:
      # It doesn't actually matter what value this is since we separate dev and prod instances.
      # I also get baffling errors saying:
      #   <API_PHYSICAL_ID>|<STAGE> already exists in stack <STACK_ARN>
      # where <STAGE> is the Environment parameter
      # EVEN if Environment is dev.
      # Why the difference between Ref output and hardcoding it????
      StageName: dev
      Auth:
        DefaultAuthorizer: CognitoAuth
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
        AllowOrigin: !If
          - IsProd
          - Fn::Sub:
            - "'${Origin}'"
            - Origin: !ImportValue
                Fn::Sub: "neox-${WebsiteStackName}-${UseCase}-prod-website"
          - !If
            - IsDev
            - Fn::Sub:
              - "'${Origin}'"
              - Origin: !ImportValue
                  Fn::Sub: "neox-${WebsiteStackName}-${UseCase}-dev-website"
            - !If
              - IsLocalhostWebsite
              - !Sub "'http://localhost:${WebsiteLocalhostPort}'"
              - "'*'"
        AllowMethods: "'OPTIONS, GET, POST, PUT, PATCH, DELETE'"
        AllowHeaders: "'Origin, Content-Type, Accept'"
        AllowCredentials: true
      MethodSettings:
        - LoggingLevel: INFO
          MetricsEnabled: true
          ResourcePath: '/*'
          HttpMethod: '*'
      TracingEnabled: true
      # Domain:
      #   DomainName: api.neox.co.nz

  # Set CloudWatch Logs role ARN in account settings.
  APICloudWatchRoleArn:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APICloudWatchRole.Arn
  APICloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
              - apigateway.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
  # NOTE: the lambdas seem to be automatically integrated via lambda proxy integration
  # Lambda
  FuncStudiesCreate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-studies-create-get-modify/
      Handler: index.handler_create
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /studies/{studyID}
            Method: put
            RestApiId: !Ref API
  FuncStudiesInfoFetch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-studies-create-get-modify/
      Handler: index.handler_fetch
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /studies/{studyID}/info
            Method: get
            RestApiId: !Ref API
  FuncStudiesInfoModify:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-studies-create-get-modify/
      Handler: index.handler_modify
      Role: !GetAtt LambdaRole.Arn
      Events:
        ReplaceEvent:
          Type: Api
          Properties:
            Path: /studies/{studyID}/info
            Method: put
            RestApiId: !Ref API
        PartialUpdateEvent:
          Type: Api
          Properties:
            Path: /studies/{studyID}/info
            Method: patch
            RestApiId: !Ref API
  FuncStudiesResearchersAddRemove:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-studies-modifyparticipants/
      Handler: index.handler_researchers
      Role: !GetAtt LambdaRole.Arn
      Events:
        ReplaceEvent:
          Type: Api
          Properties:
            Path: /researchers/{researcherID}/studies/{studyID}
            Method: put
            RestApiId: !Ref API
        PartialUpdateEvent:
          Type: Api
          Properties:
            Path: /researchers/{researcherID}/studies/{studyID}
            Method: delete
            RestApiId: !Ref API
  FuncStudiesChildrenAddRemove:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-studies-modifyparticipants/
      Handler: index.handler_children
      Role: !GetAtt LambdaRole.Arn
      Events:
        ReplaceEvent:
          Type: Api
          Properties:
            Path: /children/{childID}/studies/{studyID}
            Method: put
            RestApiId: !Ref API
        PartialUpdateEvent:
          Type: Api
          Properties:
            Path: /children/{childID}/studies/{studyID}
            Method: delete
            RestApiId: !Ref API
  FuncStudiesListParticipants:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-studies-listparticipants/
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /studies/{studyID}/participants
            Method: get
            RestApiId: !Ref API
  FuncStudiesSearchGlobally:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-studies-search/
      Handler: index.handler_global
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /studies
            Method: get
            RestApiId: !Ref API
  FuncStudiesSearchInResearchers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-studies-search/
      Handler: index.handler_researchers
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /researchers/{researcherID}/studies
            Method: get
            RestApiId: !Ref API
  FuncStudiesSearchInChildren:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-studies-search/
      Handler: index.handler_children
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /children/{childID}/studies
            Method: get
            RestApiId: !Ref API
  FuncSamplesSearch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-samples-search/
      Handler: index.handler
      Timeout: 30  # there can be loads of samples on server
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /samples/{childID}
            Method: get
            RestApiId: !Ref API
  FuncSamplesAdd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-samples-add/
      Handler: index.handler
      Timeout: 30  # caller can send lots of samples
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /samples/{childID}
            Method: post
            RestApiId: !Ref API
  FuncParentsListChildren:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-parents-listchildren/
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /parents/{parentID}/children
            Method: get
            RestApiId: !Ref API
  FuncChildrenInfoFetch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-children-info/
      Handler: index.handler_fetch
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /children/{childID}/info
            Method: get
            RestApiId: !Ref API
  FuncChildrenInfoModify:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-children-info/
      Handler: index.handler_modify
      Role: !GetAtt LambdaRole.Arn
      Events:
        ReplaceEvent:
          Type: Api
          Properties:
            Path: /children/{childID}/info
            Method: put
            RestApiId: !Ref API
        PartialUpdateEvent:
          Type: Api
          Properties:
            Path: /children/{childID}/info
            Method: patch
            RestApiId: !Ref API
  FuncChildrenRegister:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-children-register/
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /children
            Method: post
            RestApiId: !Ref API
  FuncResearchersRegister:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-researchers-register/
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /researchers
            Method: post
            RestApiId: !Ref API
  FuncMetaAdminsRegister:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/meta-admins-register/
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
  FuncParentsSearch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-users-search/
      Handler: index.handler_parents
      Timeout: 10
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /parents
            Method: get
            RestApiId: !Ref API
  FuncResearchersSearch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-users-search/
      Handler: index.handler_researchers
      Timeout: 10
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /researchers
            Method: get
            RestApiId: !Ref API
  FuncAdminsSearch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-users-search/
      Handler: index.handler_admins
      Timeout: 10
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /admins
            Method: get
            RestApiId: !Ref API
  FuncMetaSetupDB:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/meta-setupdb/
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
  FuncMetaClearSamples:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/meta-clearsamples/
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
  FuncMetaReadAllTables:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/meta-read-all-tables/
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
  FuncMetaSetupUserGroups:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/meta-setupusergroups/
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
  FuncMetaSetupUserPool:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/meta-setupuserpool/
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          USERPOOL_ID: !GetAtt UserPool.UserPoolId
          USERPOOL_ARN: !GetAtt UserPool.Arn
          POSTCONFIRM_TRIGGER_ARN: !GetAtt FuncCognitoPostConfirm.Arn
  LayerDepsJS:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-layer-lib-js"
      Description: Common code and dependencies for JS lambda functions
      ContentUri: lambda/layers/project-lib-js/
      CompatibleRuntimes:
        - nodejs20.x
    Metadata:
      BuildMethod: nodejs20.x

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  DatabaseSecurityGroup:
    Description: Security group for database
    Value: !Ref DatabaseSecurityGroup
  DBAccessSecurityGroup:
    Description: Security group for services allowed to access database
    Value: !Ref DBAccessSecurityGroup
  SecretsManagerVPCEndpoint:
    Description: Endpoint for hosts inside VPC to access Secrets Manager
    Value: !Ref SecretsManagerVPCEndpoint
  SecretsManagerSecurityGroup:
    Description: Security group for Secrets Manager
    Value: !Ref SecretsManagerSecurityGroup
  SecretsAccessSecurityGroup:
    Description: Security group for applications allowed to access Secrets Manager
    Value: !Ref SecretsAccessSecurityGroup

  DatabaseInstanceName:
    Description: Database for samples, etc
    Value: !Ref Database
  DatabaseEndpointAddress:
    Description: "Address for the endpoint to DB (should be unreachable from public Internet)"
    Value: !GetAtt Database.Endpoint.Address
  DatabaseEndpointPort:
    Description: "Port for the endpoint to DB (should be unreachable from public Internet)"
    Value: !GetAtt Database.Endpoint.Port

  APIEndpoint:
    Description: Base URL of API
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/dev"

  CorsAllowOrigin:
    Description: The origin which CORS will accept
    Value: !If
      - IsProd
      - Fn::Sub:
        - "'${Origin}'"
        - Origin: !ImportValue
            Fn::Sub: "neox-${WebsiteStackName}-${UseCase}-prod-website"
      - !If
        - IsDev
        - Fn::Sub:
          - "'${Origin}'"
          - Origin: !ImportValue
              Fn::Sub: "neox-${WebsiteStackName}-${UseCase}-dev-website"
        - !If
          - IsLocalhostWebsite
          - !Sub "'http://localhost:${WebsiteLocalhostPort}'"
          - "'*'"

  UserPoolId:
    Value: !GetAtt UserPool.UserPoolId
  AppClientId:
    Value: !GetAtt UserPoolClient.ClientId
  # Future proofing in case we want distinct clients for app and web interface.
  WebClientId:
    Value: !GetAtt UserPoolClient.ClientId
  AdminsUserGroup:
    Description: Group for users who have admin access
    Value: !Ref AdminsUserGroup
  ResearchersUserGroup:
    Description: Group for users who are researchers
    Value: !Ref ResearchersUserGroup
  ParentsUserGroup:
    Description: Group for users who are parents
    Value: !Ref ParentsUserGroup
