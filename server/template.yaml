AWSTemplateFormatVersion: "2010-09-09"
Description: SAM template for cloud backend
Transform: AWS::Serverless-2016-10-31

# TODO: set up dev and "prod" (ie, OK for non-cloud devs to use) environments

Parameters:
  Environment:
    Description: The environment in which to run the stack (needed for CORS)
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - localhost

  WebsiteStackName:
    Description: Name of an active CloudFormation stack containing the S3 buckets to use for prod and dev websites.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: frontend
  WebsiteLocalhostPort:
    Description: The port used for localhost development of website
    Type: Number
    Default: 3000

  DatabasePort:
    Description: Please enter the port number on which the database will accept connections
    Type: Number
    Default: 5432

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.8.0.0/16

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.8.20.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.8.21.0/24
# Mappings:

Conditions:
  IsProd: !Equals [ !Ref Environment, prod ]
  IsDev: !Equals [ !Ref Environment, dev ]
  IsLocalhostWebsite: !Equals [ !Ref Environment, localhost ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: backend-vpc
      # Tags:
      #   - Key: Name
      #     Value: !Ref EnvironmentName
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      ResourceType: VPC
      ResourceId: !Ref VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Sub "${AWS::StackName}-VPCFlowLogsGroup"
      LogFormat: ${version} ${vpc-id} ${subnet-id} ${instance-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${packets} ${bytes} ${start} ${end} ${action} ${log-status}
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
  FlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role to allow VPC to publish flow logs.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        # It seems like the PolicyName (which is the "friendly name") must be unique within an account
        # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html
        - PolicyName: !Sub "${AWS::StackName}-FlowLogsPublish"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet (AZ1)
      # Tags:
      #   - Key: Name
      #     Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet (AZ2)
      # Tags:
      #   - Key: Name
      #     Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Routes (AZ1)
      # Tags:
      #   - Key: Name
      #     Value: !Sub ${EnvironmentName} Private Routes (AZ1)
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Routes (AZ2)
      # Tags:
      #   - Key: Name
      #     Value: !Sub ${EnvironmentName} Private Routes (AZ2)
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref NetworkACL
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref NetworkACL
  OutboundDbRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 100
      Protocol: 6  # TCP
      Egress: true
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      PortRange:
        From: !Ref DatabasePort
        To: !Ref DatabasePort
  InboundDbRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 100
      Protocol: 6  # TCP
      Egress: false
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      PortRange:
        From: !Ref DatabasePort
        To: !Ref DatabasePort
  OutboundLambdaRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 110
      Protocol: 6  # TCP
      Egress: true
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      # need to send packets back to Lambdas which start connections from an ephemeral port range.
      # See https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports
      PortRange:
        From: 1024
        To: 65535
  InboundLambdaRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 110
      Protocol: 6  # TCP
      Egress: false
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      # need to send packets back to Lambdas which start connections from an ephemeral port range.
      # See https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports
      PortRange:
        From: 1024
        To: 65535
  OutboundSecretsRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 150
      Protocol: 6  # TCP
      Egress: true
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      PortRange:
        From: 443
        To: 443
  InboundSecretsRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 150
      Protocol: 6  # TCP
      Egress: false
      RuleAction: allow
      CidrBlock: !Ref VpcCIDR
      PortRange:
        From: 443
        To: 443

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Role to allow lambda functions to do everything in the set of things our backend needs to do (ie, it's not minimal)"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        # It seems like the PolicyName (which is the "friendly name") must be unique within an account
        # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html
        - PolicyName: !Sub "${AWS::StackName}-AllowReadSecretValue-DB"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !GetAtt Database.MasterUserSecret.SecretArn
                # Based on https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#auth-and-access_examples_vpc
                Condition:
                  StringEquals:
                    aws:sourceVpce: !Ref SecretsManagerVPCEndpoint

  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SecretsManagerSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  SecretsManagerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound HTTPS traffic from authorised applications for Secrets Manager
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId:
            Ref: SecretsAccessSecurityGroup
  SecretsAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for applications allowed to access Secrets Manager
      VpcId: !Ref VPC
      # no in/egress rules since none needed

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for database (mandatory for VPC DBs!)
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound postgres traffic from authorised applications for database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DatabasePort
          ToPort: !Ref DatabasePort
          SourceSecurityGroupId:
            Ref: DBAccessSecurityGroup
  DBAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for services allowed to access database
      VpcId: !Ref VPC
      # no in/egress rules since none needed
  # Database
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      StorageType: gp2
      AllocatedStorage: 20  # GiB
      DBInstanceClass: db.t3.micro  # free-tier acceptable
      # Use Default DBName of `postgres` for PostgreSQL
      DBName: postgres
      Port: !Ref DatabasePort
      MasterUsername: postgres
      ManageMasterUserPassword: true  # in AWS Secrets Manager
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      EnablePerformanceInsights: true
      EnableCloudwatchLogsExports:
        - postgresql
        - upgrade
      BackupRetentionPeriod: 7  # days
      StorageEncrypted: true
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
  # TODO: Use parameter store for location of cert layer?
  # See https://dev.to/leading-edje/aws-lambda-layer-for-private-certificates-465j
  LayerCACertificates:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-layer-ca-certs"
      Description: Certificates to connect to DB via TLS
      ContentUri: lambda/layers/certs/
      CompatibleRuntimes:
        - nodejs20.x
      # RetentionPolicy: Retain

  # API Gateway
  API:
    Type: AWS::Serverless::Api
    DependsOn: APICloudWatchRoleArn
    Properties:
      AlwaysDeploy: true
      StageName: !Ref Environment
      # TODO: more restrictive?
      Cors:
        AllowOrigin: !If
          - IsProd
          - Fn::Sub:
            - "'${Origin}'"
            - Origin: !ImportValue
                Fn::Sub: "${WebsiteStackName}-url-prod"
          - !If
            - IsDev
            - Fn::Sub:
              - "'${Origin}'"
              - Origin: !ImportValue
                  Fn::Sub: "${WebsiteStackName}-url-dev"
            - !If
              - IsLocalhostWebsite
              - !Sub "'http://localhost:${WebsiteLocalhostPort}'"
              - "'*'"
        AllowMethods: "'OPTIONS, GET, POST, PUT, PATCH, DELETE'"
        AllowHeaders: "'Origin, Content-Type, Accept'"
      MethodSettings:
        - LoggingLevel: INFO
          MetricsEnabled: true
          ResourcePath: '/*'
          HttpMethod: '*'
      TracingEnabled: true
      # Domain:
      #   DomainName: api.neox.co.nz

  # Set CloudWatch Logs role ARN in account settings.
  APICloudWatchRoleArn:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APICloudWatchRole.Arn
  APICloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
              - apigateway.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
  # NOTE: the lambdas seem to be automatically integrated via lambda proxy integration
  # Lambda
  FuncSamplesSearch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-samples-search/
      Handler: index.handler
      Runtime: nodejs20.x
      Layers:
        - !Ref LayerDepsJS
        - !Ref LayerCACertificates
      Environment:
        Variables:
          PGHOST: !GetAtt Database.Endpoint.Address
          # Default PGDATABASE is the user which we will get from the SecretsManager Secret
          PGPORT: !GetAtt Database.Endpoint.Port
          DB_SECRET_ARN: !GetAtt Database.MasterUserSecret.SecretArn
          SSL_CERT_FILE: /opt/global-bundle.pem
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DBAccessSecurityGroup
          - !Ref SecretsAccessSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /samples
            Method: get
            RestApiId: !Ref API
  FuncSamplesAdd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-samples-add/
      Handler: index.handler
      Runtime: nodejs20.x
      Layers:
        - !Ref LayerDepsJS
        - !Ref LayerCACertificates
      Environment:
        Variables:
          PGHOST: !GetAtt Database.Endpoint.Address
          # Default PGDATABASE is the user which we will get from the SecretsManager Secret
          PGPORT: !GetAtt Database.Endpoint.Port
          DB_SECRET_ARN: !GetAtt Database.MasterUserSecret.SecretArn
          SSL_CERT_FILE: /opt/global-bundle.pem
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DBAccessSecurityGroup
          - !Ref SecretsAccessSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /samples/{childID}
            Method: post
            RestApiId: !Ref API
  FuncChildrenInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-children-info/
      Handler: index.handler
      Runtime: nodejs20.x
      Layers:
        - !Ref LayerDepsJS
        - !Ref LayerCACertificates
      Environment:
        Variables:
          PGHOST: !GetAtt Database.Endpoint.Address
          # Default PGDATABASE is the user which we will get from the SecretsManager Secret
          PGPORT: !GetAtt Database.Endpoint.Port
          DB_SECRET_ARN: !GetAtt Database.MasterUserSecret.SecretArn
          SSL_CERT_FILE: /opt/global-bundle.pem
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DBAccessSecurityGroup
          - !Ref SecretsAccessSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /children/{childID}/info
            Method: get
            RestApiId: !Ref API
        ReplaceEvent:
          Type: Api
          Properties:
            Path: /children/{childID}/info
            Method: put
            RestApiId: !Ref API
        PartialUpdateEvent:
          Type: Api
          Properties:
            Path: /children/{childID}/info
            Method: patch
            RestApiId: !Ref API
  FuncChildrenRegister:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/action-children-register/
      Handler: index.handler
      Runtime: nodejs20.x
      Layers:
        - !Ref LayerDepsJS
        - !Ref LayerCACertificates
      Environment:
        Variables:
          PGHOST: !GetAtt Database.Endpoint.Address
          # Default PGDATABASE is the user which we will get from the SecretsManager Secret
          PGPORT: !GetAtt Database.Endpoint.Port
          DB_SECRET_ARN: !GetAtt Database.MasterUserSecret.SecretArn
          SSL_CERT_FILE: /opt/global-bundle.pem
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DBAccessSecurityGroup
          - !Ref SecretsAccessSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /children
            Method: post
            RestApiId: !Ref API
  FuncMetaSetupDB:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/meta-setupdb/
      Handler: index.handler
      Runtime: nodejs20.x
      Layers:
        - !Ref LayerDepsJS
        - !Ref LayerCACertificates
      Environment:
        Variables:
          PGHOST: !GetAtt Database.Endpoint.Address
          # Default PGDATABASE is the user which we will get from the SecretsManager Secret
          PGPORT: !GetAtt Database.Endpoint.Port
          DB_SECRET_ARN: !GetAtt Database.MasterUserSecret.SecretArn
          SSL_CERT_FILE: /opt/global-bundle.pem
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DBAccessSecurityGroup
          - !Ref SecretsAccessSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
  FuncMetaSetupTestData:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/meta-setuptestdata/
      Handler: index.handler
      Runtime: nodejs20.x
      Layers:
        - !Ref LayerDepsJS
        - !Ref LayerCACertificates
      Environment:
        Variables:
          PGHOST: !GetAtt Database.Endpoint.Address
          # Default PGDATABASE is the user which we will get from the SecretsManager Secret
          PGPORT: !GetAtt Database.Endpoint.Port
          DB_SECRET_ARN: !GetAtt Database.MasterUserSecret.SecretArn
          SSL_CERT_FILE: /opt/global-bundle.pem
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DBAccessSecurityGroup
          - !Ref SecretsAccessSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
  FuncMetaReadAllTables:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/meta-read-all-tables/
      Handler: index.handler
      Runtime: nodejs20.x
      Layers:
        - !Ref LayerDepsJS
        - !Ref LayerCACertificates
      Environment:
        Variables:
          PGHOST: !GetAtt Database.Endpoint.Address
          # Default PGDATABASE is the user which we will get from the SecretsManager Secret
          PGPORT: !GetAtt Database.Endpoint.Port
          DB_SECRET_ARN: !GetAtt Database.MasterUserSecret.SecretArn
          SSL_CERT_FILE: /opt/global-bundle.pem
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DBAccessSecurityGroup
          - !Ref SecretsAccessSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
  LayerDepsJS:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-layer-lib-js"
      Description: Common code and dependencies for JS lambda functions
      # ContentUri: s3://proj-deploy-artifacts/layer-deps-js.zip
      ContentUri: lambda/layers/project-lib-js/
      CompatibleRuntimes:
        - nodejs20.x
    Metadata:
      BuildMethod: nodejs20.x

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  DatabaseSecurityGroup:
    Description: Security group for database
    Value: !Ref DatabaseSecurityGroup
  DBAccessSecurityGroup:
    Description: Security group for services allowed to access database
    Value: !Ref DBAccessSecurityGroup
  SecretsManagerVPCEndpoint:
    Description: Endpoint for hosts inside VPC to access Secrets Manager
    Value: !Ref SecretsManagerVPCEndpoint
  SecretsManagerSecurityGroup:
    Description: Security group for Secrets Manager
    Value: !Ref SecretsManagerSecurityGroup
  SecretsAccessSecurityGroup:
    Description: Security group for applications allowed to access Secrets Manager
    Value: !Ref SecretsAccessSecurityGroup

  DatabaseInstanceName:
    Description: Database for samples, etc
    Value: !Ref Database
  DatabaseEndpointAddress:
    Description: "Address for the endpoint to DB (should be unreachable from public Internet)"
    Value: !GetAtt Database.Endpoint.Address
  DatabaseEndpointPort:
    Description: "Port for the endpoint to DB (should be unreachable from public Internet)"
    Value: !GetAtt Database.Endpoint.Port

  APIEndpoint:
    Description: Base URL of API
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
